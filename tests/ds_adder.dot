digraph ds_adder {
	label="DSAdder\n\nNet(name:Ac, purpose:IN, type:Type(type:FIXED, width:8, shift:0))\nNet(name:Ad, purpose:IN, type:Type(type:FIXED, width:8, shift:0))\nNet(name:Bc, purpose:IN, type:Type(type:FIXED, width:8, shift:0))\nNet(name:Bd, purpose:IN, type:Type(type:FIXED, width:8, shift:0))\nNet(name:Sc, purpose:OUT, type:Type(type:FIXED, width:8, shift:0))\nNet(name:Sd, purpose:OUT, type:Type(type:FIXED, width:8, shift:0))\nNet(name:WIDTH, purpose:REG, type:Type(type:FIXED, width:8, shift:0))\nNet(name:branch_0, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:branch_1, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:branch_2, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:branch_3, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:branch_4, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:branch_5, purpose:COND, type:Type(type:BITS, width:1, shift:0))\nNet(name:ci, purpose:REG, type:Type(type:FIXED, width:8, shift:0))\nNet(name:co, purpose:REG, type:Type(type:FIXED, width:8, shift:0))\nNet(name:s, purpose:REG, type:Type(type:FIXED, width:8, shift:0))";
	labeljust="l";
	labelloc="t";
	rankdir=TB;
	fontsize=16;
	graph[fontname="Courier", ranksep=2]; //fontsize=30 labelloc="t" label="" splines=true overlap=false rankdir = "LR"
	node[fontname="Courier", shape=record, fillcolor="beige", fontsize=24];

	Ac[label="Ac :1", shape=cylinder];
	Ad[label="Ad :8", shape=cylinder];
	Bc[label="Bc :1", shape=cylinder];
	Bd[label="Bd :8", shape=cylinder];
	{ rank=min; Ac; Ad; Bc; Bd; }

	Sc[label="Sc :1", shape=cylinder];
	Sd[label="Sd :8", shape=cylinder];
	{ rank=max; Sc; Sd; }

	subgraph cluster_b0 {
		label="branch_0";
		labeljust="l";
		style=dashed;
		fontsize=24;
		align0[style=invis];

		// Condition
		//b0_head[shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20, label=<<table border="1">
		//    <tr><td>top:</td><td>e8</td></tr>
		//    <tr><td>e8 =</td><td> e5&e7  (8)\ne7 = v18446744073709551615==v5  (10)\ne5 = e4==1  (10)\ne4 = \"probe\"(v2)  (29)\n</td></tr>
		//</table>>];
		b0_head[shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20, label=<<table border="0" cellborder="1" cellspacing="0">
			<tr><td>top:</td><td>e8</td></tr>
			<tr><td>e8</td><td>= e5&amp;e7  (8)</td></tr>
			<tr><td>e7</td><td>= v18446744073709551615==v5  (10)</td></tr>
			<tr><td>e5</td><td>= e4==1  (10)</td></tr>
			<tr><td>e4</td><td>= "probe"(v2)  (29)</td></tr>
			</table>>];

		// Inputs
		b0_Ac[label="Ac", shape=cylinder];
		b0_Ad[label="Ad", shape=cylinder];
		b0_Bc[label="Bc", shape=cylinder];
		b0_Bd[label="Bd", shape=cylinder];
		{ rank=same; b0_Ac; b0_Ad; b0_Bc; b0_Bd; }

		Ac -> b0_Ac[color=red];
		Ad -> b0_Ad[color=blue];
		Bc -> b0_Bc[color=red];
		Bd -> b0_Bd[color=blue];
		b0_Ac -> b0_head[arrowhead=tee];
		b0_Ad -> b0_head[arrowhead=tee];
		b0_Bc -> b0_head[arrowhead=tee];
		b0_Bd -> b0_head[arrowhead=tee];

		// Registers
		b0_ci_expr[label="co\nlorem\nipsum", shape=note, style=filled, fontsize=16];
		b0_ci[label="ci", shape=folder];
		b0_head -> b0_ci_expr -> b0_ci;

		// Outputs
		b0_Sc_expr[label="top: 0\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		b0_Sd_expr[label="top: e0\ne0 = v8[0:v6]  (28)\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		{ rank=same; b0_Sc_expr; b0_Sd_expr; }

		b0_head -> b0_Sc_expr;
		b0_head -> b0_Sd_expr;

		b0_Sc[label="Sc", shape=cylinder];
		b0_Sd[label="Sd", shape=cylinder];

		b0_Sc_expr -> b0_Sc;
		b0_Sd_expr -> b0_Sd;

		b0_Sc -> Sc[color=red];
		b0_Sd -> Sd[color=blue];
	}

	subgraph cluster_b1 {
		label="branch_1";
		labeljust="l";
		style=dashed;
		fontsize=24;
		align1[style=invis];

		// Condition
		b1_head[label="Ac && !Bc", shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20];

		// Inputs
		b1_Bc[label="Bc", shape=cylinder];
		b1_Bd[label="Bd", shape=cylinder];
		{ rank=same; b1_Bc; b1_Bd; }

		Bc -> b1_Bc[color=red];
		Bd -> b1_Bd[color=blue];
		b1_Bc -> b1_head[arrowhead=tee];
		b1_Bd -> b1_head[arrowhead=tee];

		// Registers
		b1_ci_expr[label="co\nlorem\nipsum", shape=note, style=filled, fontsize=16];
		b1_ci[label="ci", shape=folder];
		b1_head -> b1_ci_expr -> b1_ci;

		// Outputs
		b1_Sc_expr[label="top: 0\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		b1_Sd_expr[label="top: e0\ne0 = v8[0:v6]  (28)\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		{ rank=same; b1_Sc_expr; b1_Sd_expr; }

		b1_head -> b1_Sc_expr;
		b1_head -> b1_Sd_expr;

		b1_Sc[label="Sc", shape=cylinder];
		b1_Sd[label="Sd", shape=cylinder];

		b1_Sc_expr -> b1_Sc;
		b1_Sd_expr -> b1_Sd;

		b1_Sc -> Sc[color=red];
		b1_Sd -> Sd[color=blue];
	}

	subgraph cluster_b2 {
		label="branch_2";
		labeljust="l";
		style=dashed;
		fontsize=24;
		align2[style=invis];

		// Condition
		b2_head[label="!Ac && Bc\nlorem\nipsum", shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20];

		// Inputs
		b2_Ac[label="Ac", shape=cylinder];
		b2_Ad[label="Ad", shape=cylinder];
		{ rank=same; b2_Ac; b2_Ad; }

		Ac -> b2_Ac[color=red];
		Ad -> b2_Ad[color=blue];
		b2_Ac -> b2_head[arrowhead=tee];
		b2_Ad -> b2_head[arrowhead=tee];

		// Registers
		b2_ci_expr[label="co\nlorem\nipsum", shape=note, style=filled, fontsize=16];
		b2_ci[label="ci", shape=folder];
		b2_head -> b2_ci_expr -> b2_ci;

		// Outputs
		b2_Sc_expr[label="top: 0\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		b2_Sd_expr[label="top: e0\ne0 = v8[0:v6]  (28)\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		{ rank=same; b2_Sc_expr; b2_Sd_expr; }

		b2_head -> b2_Sc_expr;
		b2_head -> b2_Sd_expr;

		b2_Sc[label="Sc", shape=cylinder];
		b2_Sd[label="Sd", shape=cylinder];

		b2_Sc_expr -> b2_Sc;
		b2_Sd_expr -> b2_Sd;

		b2_Sc -> Sc[color=red];
		b2_Sd -> Sd[color=blue];
	}

	subgraph cluster_b3 {
		label="branch_3";
		labeljust="l";
		style=dashed;
		fontsize=24;
		align3[style=invis];

		// Condition
		b3_head[label="Ac && Bc && co != ci\nlorem\nipsum", shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20];

		// Inputs

		// Registers
		b3_ci_expr[label="co\nlorem\nipsum", shape=note, style=filled, fontsize=16];
		b3_ci[label="ci", shape=folder];
		b3_head -> b3_ci_expr -> b3_ci;

		// Outputs
		b3_Sc_expr[label="top: 0\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		b3_Sd_expr[label="top: e0\ne0 = v8[0:v6]  (28)\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		{ rank=same; b3_Sc_expr; b3_Sd_expr; }

		b3_head -> b3_Sc_expr;
		b3_head -> b3_Sd_expr;

		b3_Sc[label="Sc", shape=cylinder];
		b3_Sd[label="Sd", shape=cylinder];

		b3_Sc_expr -> b3_Sc;
		b3_Sd_expr -> b3_Sd;

		b3_Sc -> Sc[color=red];
		b3_Sd -> Sd[color=blue];
	}

	subgraph cluster_b4 {
		label="branch_4";
		labeljust="l";
		style=dashed;
		fontsize=24;
		align4[style=invis];

		// Condition
		b4_head[label="Ac && Bc && co == ci\nlorem\nipsum", shape=doubleoctagon, style=filled, fillcolor=crimson, fontcolor=white, fontsize=20];

		// Inputs
		b4_Ac[label="Ac", shape=cylinder];
		b4_Ad[label="Ad", shape=cylinder];
		b4_Bc[label="Bc", shape=cylinder];
		b4_Bd[label="Bd", shape=cylinder];
		{ rank=same; b4_Ac; b4_Ad; b4_Bc; b4_Bd; }

		Ac -> b4_Ac[color=red];
		Ad -> b4_Ad[color=blue];
		Bc -> b4_Bc[color=red];
		Bd -> b4_Bd[color=blue];
		b4_Ac -> b4_head[arrowhead=tee];
		b4_Ad -> b4_head[arrowhead=tee];
		b4_Bc -> b4_head[arrowhead=tee];
		b4_Bd -> b4_head[arrowhead=tee];

		// Registers
		b4_ci_expr[label="co\nlorem\nipsum", shape=note, style=filled, fontsize=16];
		b4_ci[label="ci", shape=folder];
		b4_head -> b4_ci_expr -> b4_ci;

		// Outputs
		b4_Sc_expr[label="top: 1\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		b4_Sd_expr[label="top: e0\ne0 = v8[0:v6]  (28)\n", shape=note, style=filled, fillcolor=palegreen, fontsize=16];
		{ rank=same; b4_Sc_expr; b4_Sd_expr; }

		b4_head -> b4_Sc_expr;
		b4_head -> b4_Sd_expr;

		b4_Sc[label="Sc", shape=cylinder];
		b4_Sd[label="Sd", shape=cylinder];

		b4_Sc_expr -> b4_Sc;
		b4_Sd_expr -> b4_Sd;

		b4_Sc -> Sc[color=red];
		b4_Sd -> Sd[color=blue];
	}

	// Force all clusters to line up horizontally
	{ rank=same; align0; align1; align2; align3; align4; }
}
